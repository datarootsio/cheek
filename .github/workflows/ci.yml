name: ci
on: 
  push:
  pull_request:

jobs:
  golangci:
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - uses: actions/setup-go@v5
        with:
          go-version: "^1.20"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.1

  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - uses: actions/setup-go@v5
        with:
          go-version: "^1.20"
      - name: run tests on cmd
        run: go test ./cmd
      - name: run tests on pkg
        run: go test ./pkg -timeout 120s -coverprofile=cover.out -covermode=atomic
      - uses: codecov/codecov-action@v5
        with:
          files: ./cover.out

  version_tag:
    if: github.event.repository.fork == false && github.actor != 'dependabot[bot]'
    needs: 
      - tests
      - golangci
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.tag_action.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - name: Bump version and push tag
        if: github.ref == 'refs/heads/main'
        id: tag_action
        uses: anothrNick/github-tag-action@1.73.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch
          PRERELEASE: ${{ github.ref != 'refs/heads/main' }}

  build:
    if: github.event.repository.fork == false && github.actor != 'dependabot[bot]'
    needs: version_tag
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: ["386", amd64, arm64]
        exclude:
          - goarch: "386"
            goos: darwin
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      ## build tailwind assets
      - uses: actions/setup-node@v4
        with:
          node-version: '19'
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - run: pnpm install
      - run: npm run build
      ## setup go
      - uses: actions/setup-go@v5
        with:
          go-version: "^1.22"
      ## above is fine to get latest for now, also save a copy with short sha
      - id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - run: mkdir -p ${{ matrix.goos }}/${{ matrix.goarch }}
      - run: env GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-X 'github.com/bart6114/cheek/pkg.version=${{ needs.version_tag.outputs.new_tag }}' -X 'github.com/bart6114/cheek/pkg.commitSHA=${{ steps.vars.outputs.sha_short }}'" -o ${{ matrix.goos }}/${{ matrix.goarch }}
      - run: cp ${{ matrix.goos }}/${{ matrix.goarch }}/cheek ${{ matrix.goos }}/${{ matrix.goarch }}/cheek-${{ matrix.goos }}-${{ matrix.goarch }}
      ## upload artifacts for release
      - uses: actions/upload-artifact@v4
        with:
          name: cheek-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ matrix.goos }}/${{ matrix.goarch }}/cheek-${{ matrix.goos }}-${{ matrix.goarch }}

  release:
    if: github.ref == 'refs/heads/main' && needs.version_tag.outputs.new_tag != ''
    needs: 
      - build
      - version_tag
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.version_tag.outputs.new_tag }}
          name: Release ${{ needs.version_tag.outputs.new_tag }}
          files: artifacts/*/cheek-*
          generate_release_notes: true

  docker-build:
    ## only do this on main
    needs: 
      - build
      - version_tag
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/bart6114/cheek:latest
            ghcr.io/bart6114/cheek:${{ needs.version_tag.outputs.new_tag }}

  docs:
    needs: 
      - build
      - version_tag
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
          submodules: true
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true
      - name: Build Hugo site
        run: |
          cd docs
          hugo --minify
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs/public'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4